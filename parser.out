Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMA
    CONSOLE
    DIVIDE
    EQ
    GE
    GLOBAL
    GT
    LOG
    LT
    MINUS
    NE
    SINGLE_QUOTE
    STRING
    TIMES
    VAR

Grammar

Rule 0     S' -> program
Rule 1     program -> declaration for_loop
Rule 2     declaration -> INT ID SEMICOLON
Rule 3     for_loop -> FOR LPAREN assignment SEMICOLON condition SEMICOLON increment RPAREN LBRACE block RBRACE
Rule 4     assignment -> ID ASSIGN NUMBER
Rule 5     condition -> ID LE NUMBER
Rule 6     increment -> ID PLUS PLUS
Rule 7     block -> system_println_statement
Rule 8     system_println_statement -> SYSTEM DOT OUT DOT PRINTLN LPAREN ID RPAREN SEMICOLON

Terminals, with rules where they appear

ASSIGN               : 4
COMMA                : 
CONSOLE              : 
DIVIDE               : 
DOT                  : 8 8
EQ                   : 
FOR                  : 3
GE                   : 
GLOBAL               : 
GT                   : 
ID                   : 2 4 5 6 8
INT                  : 2
LBRACE               : 3
LE                   : 5
LOG                  : 
LPAREN               : 3 8
LT                   : 
MINUS                : 
NE                   : 
NUMBER               : 4 5
OUT                  : 8
PLUS                 : 6 6
PRINTLN              : 8
RBRACE               : 3
RPAREN               : 3 8
SEMICOLON            : 2 3 3 8
SINGLE_QUOTE         : 
STRING               : 
SYSTEM               : 8
TIMES                : 
VAR                  : 
error                : 

Nonterminals, with rules where they appear

assignment           : 3
block                : 3
condition            : 3
declaration          : 1
for_loop             : 1
increment            : 3
program              : 0
system_println_statement : 7

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . declaration for_loop
    (2) declaration -> . INT ID SEMICOLON

    INT             shift and go to state 3

    program                        shift and go to state 1
    declaration                    shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> declaration . for_loop
    (3) for_loop -> . FOR LPAREN assignment SEMICOLON condition SEMICOLON increment RPAREN LBRACE block RBRACE

    FOR             shift and go to state 5

    for_loop                       shift and go to state 4

state 3

    (2) declaration -> INT . ID SEMICOLON

    ID              shift and go to state 6


state 4

    (1) program -> declaration for_loop .

    $end            reduce using rule 1 (program -> declaration for_loop .)


state 5

    (3) for_loop -> FOR . LPAREN assignment SEMICOLON condition SEMICOLON increment RPAREN LBRACE block RBRACE

    LPAREN          shift and go to state 7


state 6

    (2) declaration -> INT ID . SEMICOLON

    SEMICOLON       shift and go to state 8


state 7

    (3) for_loop -> FOR LPAREN . assignment SEMICOLON condition SEMICOLON increment RPAREN LBRACE block RBRACE
    (4) assignment -> . ID ASSIGN NUMBER

    ID              shift and go to state 10

    assignment                     shift and go to state 9

state 8

    (2) declaration -> INT ID SEMICOLON .

    FOR             reduce using rule 2 (declaration -> INT ID SEMICOLON .)


state 9

    (3) for_loop -> FOR LPAREN assignment . SEMICOLON condition SEMICOLON increment RPAREN LBRACE block RBRACE

    SEMICOLON       shift and go to state 11


state 10

    (4) assignment -> ID . ASSIGN NUMBER

    ASSIGN          shift and go to state 12


state 11

    (3) for_loop -> FOR LPAREN assignment SEMICOLON . condition SEMICOLON increment RPAREN LBRACE block RBRACE
    (5) condition -> . ID LE NUMBER

    ID              shift and go to state 14

    condition                      shift and go to state 13

state 12

    (4) assignment -> ID ASSIGN . NUMBER

    NUMBER          shift and go to state 15


state 13

    (3) for_loop -> FOR LPAREN assignment SEMICOLON condition . SEMICOLON increment RPAREN LBRACE block RBRACE

    SEMICOLON       shift and go to state 16


state 14

    (5) condition -> ID . LE NUMBER

    LE              shift and go to state 17


state 15

    (4) assignment -> ID ASSIGN NUMBER .

    SEMICOLON       reduce using rule 4 (assignment -> ID ASSIGN NUMBER .)


state 16

    (3) for_loop -> FOR LPAREN assignment SEMICOLON condition SEMICOLON . increment RPAREN LBRACE block RBRACE
    (6) increment -> . ID PLUS PLUS

    ID              shift and go to state 19

    increment                      shift and go to state 18

state 17

    (5) condition -> ID LE . NUMBER

    NUMBER          shift and go to state 20


state 18

    (3) for_loop -> FOR LPAREN assignment SEMICOLON condition SEMICOLON increment . RPAREN LBRACE block RBRACE

    RPAREN          shift and go to state 21


state 19

    (6) increment -> ID . PLUS PLUS

    PLUS            shift and go to state 22


state 20

    (5) condition -> ID LE NUMBER .

    SEMICOLON       reduce using rule 5 (condition -> ID LE NUMBER .)


state 21

    (3) for_loop -> FOR LPAREN assignment SEMICOLON condition SEMICOLON increment RPAREN . LBRACE block RBRACE

    LBRACE          shift and go to state 23


state 22

    (6) increment -> ID PLUS . PLUS

    PLUS            shift and go to state 24


state 23

    (3) for_loop -> FOR LPAREN assignment SEMICOLON condition SEMICOLON increment RPAREN LBRACE . block RBRACE
    (7) block -> . system_println_statement
    (8) system_println_statement -> . SYSTEM DOT OUT DOT PRINTLN LPAREN ID RPAREN SEMICOLON

    SYSTEM          shift and go to state 27

    block                          shift and go to state 25
    system_println_statement       shift and go to state 26

state 24

    (6) increment -> ID PLUS PLUS .

    RPAREN          reduce using rule 6 (increment -> ID PLUS PLUS .)


state 25

    (3) for_loop -> FOR LPAREN assignment SEMICOLON condition SEMICOLON increment RPAREN LBRACE block . RBRACE

    RBRACE          shift and go to state 28


state 26

    (7) block -> system_println_statement .

    RBRACE          reduce using rule 7 (block -> system_println_statement .)


state 27

    (8) system_println_statement -> SYSTEM . DOT OUT DOT PRINTLN LPAREN ID RPAREN SEMICOLON

    DOT             shift and go to state 29


state 28

    (3) for_loop -> FOR LPAREN assignment SEMICOLON condition SEMICOLON increment RPAREN LBRACE block RBRACE .

    $end            reduce using rule 3 (for_loop -> FOR LPAREN assignment SEMICOLON condition SEMICOLON increment RPAREN LBRACE block RBRACE .)


state 29

    (8) system_println_statement -> SYSTEM DOT . OUT DOT PRINTLN LPAREN ID RPAREN SEMICOLON

    OUT             shift and go to state 30


state 30

    (8) system_println_statement -> SYSTEM DOT OUT . DOT PRINTLN LPAREN ID RPAREN SEMICOLON

    DOT             shift and go to state 31


state 31

    (8) system_println_statement -> SYSTEM DOT OUT DOT . PRINTLN LPAREN ID RPAREN SEMICOLON

    PRINTLN         shift and go to state 32


state 32

    (8) system_println_statement -> SYSTEM DOT OUT DOT PRINTLN . LPAREN ID RPAREN SEMICOLON

    LPAREN          shift and go to state 33


state 33

    (8) system_println_statement -> SYSTEM DOT OUT DOT PRINTLN LPAREN . ID RPAREN SEMICOLON

    ID              shift and go to state 34


state 34

    (8) system_println_statement -> SYSTEM DOT OUT DOT PRINTLN LPAREN ID . RPAREN SEMICOLON

    RPAREN          shift and go to state 35


state 35

    (8) system_println_statement -> SYSTEM DOT OUT DOT PRINTLN LPAREN ID RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 36


state 36

    (8) system_println_statement -> SYSTEM DOT OUT DOT PRINTLN LPAREN ID RPAREN SEMICOLON .

    RBRACE          reduce using rule 8 (system_println_statement -> SYSTEM DOT OUT DOT PRINTLN LPAREN ID RPAREN SEMICOLON .)

