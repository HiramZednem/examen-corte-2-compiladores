
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN COMMA DIVIDE EQ FOR GE GT ID INCLUDE INT LBRACE LE LPAREN LT MINUS NE NUMBER PLUS PLUSPLUS RBRACE RETURN RPAREN SEMICOLON TIMESprogram : includes functionincludes : INCLUDE includes\n                | INCLUDE\n                | emptyfunction : type ID LPAREN RPAREN LBRACE declarations statements RETURN NUMBER SEMICOLON RBRACEtype : INTdeclarations : declaration declarations\n                    | declaration\n                    | emptydeclaration : type ID ASSIGN NUMBER SEMICOLONstatements : statement statements\n                  | statement\n                  | emptystatement : assignment\n                 | for_loopassignment : ID ASSIGN expression SEMICOLONexpression : ID\n                  | NUMBER\n                  | expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expressionfor_loop : FOR LPAREN assignment SEMICOLON condition SEMICOLON increment RPAREN LBRACE statements RBRACEcondition : expression LT expression\n                 | expression LE expression\n                 | expression GT expression\n                 | expression GE expression\n                 | expression EQ expression\n                 | expression NE expressionincrement : ID PLUSPLUSempty :'
    
_lr_action_items = {'INCLUDE':([0,3,],[3,3,]),'INT':([0,2,3,4,8,12,15,37,],[-31,7,-3,-4,-2,7,7,-10,]),'$end':([1,5,49,],[0,-1,-5,]),'ID':([6,7,12,13,14,15,16,20,22,23,25,27,30,37,38,39,40,41,42,44,52,53,54,55,56,57,58,69,71,],[9,-6,-31,17,18,-8,-9,18,-14,-15,-7,32,18,-10,-16,32,32,32,32,32,60,32,32,32,32,32,32,18,-23,]),'LPAREN':([9,24,],[10,30,]),'RPAREN':([10,59,68,],[11,67,-30,]),'LBRACE':([11,67,],[12,69,]),'FOR':([12,14,15,16,20,22,23,25,37,38,69,71,],[-31,24,-8,-9,24,-14,-15,-7,-10,-16,24,-23,]),'RETURN':([12,14,15,16,19,20,21,22,23,25,29,37,38,71,],[-31,-31,-8,-9,28,-12,-13,-14,-15,-7,-11,-10,-16,-23,]),'ASSIGN':([17,18,],[26,27,]),'RBRACE':([20,21,22,23,29,38,43,69,70,71,],[-12,-13,-14,-15,-11,-16,49,-31,71,-23,]),'NUMBER':([26,27,28,39,40,41,42,44,53,54,55,56,57,58,],[31,34,35,34,34,34,34,34,34,34,34,34,34,34,]),'SEMICOLON':([31,32,33,34,35,36,38,45,46,47,48,50,61,62,63,64,65,66,],[37,-17,38,-18,43,44,-16,-19,-20,-21,-22,52,-24,-25,-26,-27,-28,-29,]),'PLUS':([32,33,34,45,46,47,48,51,61,62,63,64,65,66,],[-17,39,-18,39,39,39,39,39,39,39,39,39,39,39,]),'MINUS':([32,33,34,45,46,47,48,51,61,62,63,64,65,66,],[-17,40,-18,40,40,40,40,40,40,40,40,40,40,40,]),'TIMES':([32,33,34,45,46,47,48,51,61,62,63,64,65,66,],[-17,41,-18,41,41,41,41,41,41,41,41,41,41,41,]),'DIVIDE':([32,33,34,45,46,47,48,51,61,62,63,64,65,66,],[-17,42,-18,42,42,42,42,42,42,42,42,42,42,42,]),'LT':([32,34,45,46,47,48,51,],[-17,-18,-19,-20,-21,-22,53,]),'LE':([32,34,45,46,47,48,51,],[-17,-18,-19,-20,-21,-22,54,]),'GT':([32,34,45,46,47,48,51,],[-17,-18,-19,-20,-21,-22,55,]),'GE':([32,34,45,46,47,48,51,],[-17,-18,-19,-20,-21,-22,56,]),'EQ':([32,34,45,46,47,48,51,],[-17,-18,-19,-20,-21,-22,57,]),'NE':([32,34,45,46,47,48,51,],[-17,-18,-19,-20,-21,-22,58,]),'PLUSPLUS':([60,],[68,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'includes':([0,3,],[2,8,]),'empty':([0,3,12,14,15,20,69,],[4,4,16,21,16,21,21,]),'function':([2,],[5,]),'type':([2,12,15,],[6,13,13,]),'declarations':([12,15,],[14,25,]),'declaration':([12,15,],[15,15,]),'statements':([14,20,69,],[19,29,70,]),'statement':([14,20,69,],[20,20,20,]),'assignment':([14,20,30,69,],[22,22,36,22,]),'for_loop':([14,20,69,],[23,23,23,]),'expression':([27,39,40,41,42,44,53,54,55,56,57,58,],[33,45,46,47,48,51,61,62,63,64,65,66,]),'condition':([44,],[50,]),'increment':([52,],[59,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> includes function','program',2,'p_program','parser_1.py',10),
  ('includes -> INCLUDE includes','includes',2,'p_includes','parser_1.py',16),
  ('includes -> INCLUDE','includes',1,'p_includes','parser_1.py',17),
  ('includes -> empty','includes',1,'p_includes','parser_1.py',18),
  ('function -> type ID LPAREN RPAREN LBRACE declarations statements RETURN NUMBER SEMICOLON RBRACE','function',11,'p_function','parser_1.py',22),
  ('type -> INT','type',1,'p_type','parser_1.py',26),
  ('declarations -> declaration declarations','declarations',2,'p_declarations','parser_1.py',30),
  ('declarations -> declaration','declarations',1,'p_declarations','parser_1.py',31),
  ('declarations -> empty','declarations',1,'p_declarations','parser_1.py',32),
  ('declaration -> type ID ASSIGN NUMBER SEMICOLON','declaration',5,'p_declaration','parser_1.py',36),
  ('statements -> statement statements','statements',2,'p_statements','parser_1.py',45),
  ('statements -> statement','statements',1,'p_statements','parser_1.py',46),
  ('statements -> empty','statements',1,'p_statements','parser_1.py',47),
  ('statement -> assignment','statement',1,'p_statement','parser_1.py',51),
  ('statement -> for_loop','statement',1,'p_statement','parser_1.py',52),
  ('assignment -> ID ASSIGN expression SEMICOLON','assignment',4,'p_assignment','parser_1.py',56),
  ('expression -> ID','expression',1,'p_expression','parser_1.py',63),
  ('expression -> NUMBER','expression',1,'p_expression','parser_1.py',64),
  ('expression -> expression PLUS expression','expression',3,'p_expression','parser_1.py',65),
  ('expression -> expression MINUS expression','expression',3,'p_expression','parser_1.py',66),
  ('expression -> expression TIMES expression','expression',3,'p_expression','parser_1.py',67),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','parser_1.py',68),
  ('for_loop -> FOR LPAREN assignment SEMICOLON condition SEMICOLON increment RPAREN LBRACE statements RBRACE','for_loop',11,'p_for_loop','parser_1.py',76),
  ('condition -> expression LT expression','condition',3,'p_condition','parser_1.py',81),
  ('condition -> expression LE expression','condition',3,'p_condition','parser_1.py',82),
  ('condition -> expression GT expression','condition',3,'p_condition','parser_1.py',83),
  ('condition -> expression GE expression','condition',3,'p_condition','parser_1.py',84),
  ('condition -> expression EQ expression','condition',3,'p_condition','parser_1.py',85),
  ('condition -> expression NE expression','condition',3,'p_condition','parser_1.py',86),
  ('increment -> ID PLUSPLUS','increment',2,'p_increment','parser_1.py',90),
  ('empty -> <empty>','empty',0,'p_empty','parser_1.py',97),
]
